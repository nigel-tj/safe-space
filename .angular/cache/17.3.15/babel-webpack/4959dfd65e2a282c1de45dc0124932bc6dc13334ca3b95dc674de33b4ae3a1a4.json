{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config.js';\nimport { n as caretBackSharp, o as arrowDown } from './index7.js';\nimport { c as config, b as getIonMode } from './ionic-global.js';\nimport { e as supportsRubberBandScrolling } from './refresher.utils.js';\nimport { d as defineCustomElement$2, S as SPINNERS } from './spinner.js';\nimport { d as defineCustomElement$3 } from './icon.js';\nconst RefresherContent = /*@__PURE__*/proxyCustomElement(class RefresherContent extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n    this.pullingIcon = undefined;\n    this.pullingText = undefined;\n    this.refreshingSpinner = undefined;\n    this.refreshingText = undefined;\n  }\n  componentWillLoad() {\n    if (this.pullingIcon === undefined) {\n      /**\n       * The native iOS refresher uses a spinner instead of\n       * an icon, so we need to see if this device supports\n       * the native iOS refresher.\n       */\n      const hasRubberBandScrolling = supportsRubberBandScrolling();\n      const mode = getIonMode(this);\n      const overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\n      this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\n    }\n    if (this.refreshingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n    }\n  }\n  renderPullingText() {\n    const {\n      customHTMLEnabled,\n      pullingText\n    } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", {\n        class: \"refresher-pulling-text\",\n        innerHTML: sanitizeDOMString(pullingText)\n      });\n    }\n    return h(\"div\", {\n      class: \"refresher-pulling-text\"\n    }, pullingText);\n  }\n  renderRefreshingText() {\n    const {\n      customHTMLEnabled,\n      refreshingText\n    } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", {\n        class: \"refresher-refreshing-text\",\n        innerHTML: sanitizeDOMString(refreshingText)\n      });\n    }\n    return h(\"div\", {\n      class: \"refresher-refreshing-text\"\n    }, refreshingText);\n  }\n  render() {\n    const pullingIcon = this.pullingIcon;\n    const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'cf3caa51c4aba8a95622f6d32cafa90b683b9d6e',\n      class: mode\n    }, h(\"div\", {\n      key: '5ad70801104bbea873d3525206660c52e4447903',\n      class: \"refresher-pulling\"\n    }, this.pullingIcon && hasSpinner && h(\"div\", {\n      key: '0f95df169fd367528bfaa5d9ccf6690a613609c4',\n      class: \"refresher-pulling-icon\"\n    }, h(\"div\", {\n      key: '4b8f0465a19f017751b207807c32e1fe00fda433',\n      class: \"spinner-arrow-container\"\n    }, h(\"ion-spinner\", {\n      key: '77e60179d76f0d17f8f2dc3518f97a2a924418e6',\n      name: this.pullingIcon,\n      paused: true\n    }), mode === 'md' && this.pullingIcon === 'circular' && h(\"div\", {\n      key: 'f78f63f08f071bead1bfe655bae6394f8a219d91',\n      class: \"arrow-container\"\n    }, h(\"ion-icon\", {\n      key: '4d833d134d2b221cae2dfb0611d4029f2d664db5',\n      icon: caretBackSharp,\n      \"aria-hidden\": \"true\"\n    })))), this.pullingIcon && !hasSpinner && h(\"div\", {\n      key: 'e6db19d7fa324363d2a7c3c046510f4c8461f7e6',\n      class: \"refresher-pulling-icon\"\n    }, h(\"ion-icon\", {\n      key: '66c2ef1a53c5809f49891de515da5f55d9bf8dcc',\n      icon: this.pullingIcon,\n      lazy: false,\n      \"aria-hidden\": \"true\"\n    })), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", {\n      key: '80c413e21d362a5bb0419fcd13092453b3445cee',\n      class: \"refresher-refreshing\"\n    }, this.refreshingSpinner && h(\"div\", {\n      key: '0d5511f9644de26332a1a9ed39b160691fab74d9',\n      class: \"refresher-refreshing-icon\"\n    }, h(\"ion-spinner\", {\n      key: '54e4a96b081c7b453a98e00cceea7c086268a450',\n      name: this.refreshingSpinner\n    })), this.refreshingText !== undefined && this.renderRefreshingText()));\n  }\n  get el() {\n    return this;\n  }\n}, [0, \"ion-refresher-content\", {\n  \"pullingIcon\": [1025, \"pulling-icon\"],\n  \"pullingText\": [1, \"pulling-text\"],\n  \"refreshingSpinner\": [1025, \"refreshing-spinner\"],\n  \"refreshingText\": [1, \"refreshing-text\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-refresher-content\", \"ion-icon\", \"ion-spinner\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-refresher-content\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, RefresherContent);\n        }\n        break;\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$3();\n        }\n        break;\n      case \"ion-spinner\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n    }\n  });\n}\nconst IonRefresherContent = RefresherContent;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonRefresherContent, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}