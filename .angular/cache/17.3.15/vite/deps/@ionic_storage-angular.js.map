{
  "version": 3,
  "sources": ["../../../../../node_modules/@ionic/storage-angular/node_modules/@ionic/storage/dist/esm/index.js", "../../../../../node_modules/@ionic/storage-angular/fesm2020/ionic-storage-angular.mjs"],
  "sourcesContent": ["import LocalForage from 'localforage';\n/** @hidden */\nexport const Drivers = {\n    SecureStorage: 'ionicSecureStorage',\n    IndexedDB: LocalForage.INDEXEDDB,\n    LocalStorage: LocalForage.LOCALSTORAGE\n};\nconst defaultConfig = {\n    name: '_ionicstorage',\n    storeName: '_ionickv',\n    dbKey: '_ionickey',\n    driverOrder: [\n        Drivers.SecureStorage,\n        Drivers.IndexedDB,\n        Drivers.LocalStorage\n    ]\n};\nexport class Storage {\n    /**\n     * Create a new Storage instance using the order of drivers and any additional config\n     * options to pass to LocalForage.\n     *\n     * Possible default driverOrder options are: ['indexeddb', 'localstorage'] and the\n     * default is that exact ordering.\n     *\n     * When using Ionic Secure Storage (enterprise only), use ['ionicSecureStorage', 'indexeddb', 'localstorage'] to ensure\n     * Secure Storage is used when available, or fall back to IndexedDB or LocalStorage on the web.\n     */\n    constructor(config = defaultConfig) {\n        this._db = null;\n        this._secureStorageDriver = null;\n        const actualConfig = Object.assign({}, defaultConfig, config || {});\n        this._config = actualConfig;\n    }\n    async create() {\n        const db = LocalForage.createInstance(this._config);\n        this._db = db;\n        await db.setDriver(this._config.driverOrder || []);\n        return this;\n    }\n    /**\n     * Define a new Driver. Must be called before\n     * initializing the database. Example:\n     *\n     * await storage.defineDriver(myDriver);\n     * await storage.create();\n     */\n    async defineDriver(driver) {\n        if (driver._driver === Drivers.SecureStorage) {\n            this._secureStorageDriver = driver;\n        }\n        return LocalForage.defineDriver(driver);\n    }\n    /**\n     * Get the name of the driver being used.\n     * @returns Name of the driver\n     */\n    get driver() {\n        var _a;\n        return ((_a = this._db) === null || _a === void 0 ? void 0 : _a.driver()) || null;\n    }\n    assertDb() {\n        if (!this._db) {\n            throw new Error('Database not created. Must call create() first');\n        }\n        return this._db;\n    }\n    /**\n     * Get the value associated with the given key.\n     * @param key the key to identify this value\n     * @returns Returns a promise with the value of the given key\n     */\n    get(key) {\n        const db = this.assertDb();\n        return db.getItem(key);\n    }\n    /**\n     * Set the value for the given key.\n     * @param key the key to identify this value\n     * @param value the value for this key\n     * @returns Returns a promise that resolves when the key and value are set\n     */\n    set(key, value) {\n        const db = this.assertDb();\n        return db.setItem(key, value);\n    }\n    /**\n     * Remove any value associated with this key.\n     * @param key the key to identify this value\n     * @returns Returns a promise that resolves when the value is removed\n     */\n    remove(key) {\n        const db = this.assertDb();\n        return db.removeItem(key);\n    }\n    /**\n     * Clear the entire key value store. WARNING: HOT!\n     * @returns Returns a promise that resolves when the store is cleared\n     */\n    clear() {\n        const db = this.assertDb();\n        return db.clear();\n    }\n    /**\n     * @returns Returns a promise that resolves with the number of keys stored.\n     */\n    length() {\n        const db = this.assertDb();\n        return db.length();\n    }\n    /**\n     * @returns Returns a promise that resolves with the keys in the store.\n     */\n    keys() {\n        const db = this.assertDb();\n        return db.keys();\n    }\n    /**\n     * Iterate through each key,value pair.\n     * @param iteratorCallback a callback of the form (value, key, iterationNumber)\n     * @returns Returns a promise that resolves when the iteration has finished.\n     */\n    forEach(iteratorCallback) {\n        const db = this.assertDb();\n        return db.iterate(iteratorCallback);\n    }\n    setEncryptionKey(key) {\n        var _a;\n        if (!this._secureStorageDriver) {\n            throw new Error('@ionic-enterprise/secure-storage not installed. Encryption support not available');\n        }\n        else {\n            (_a = this._secureStorageDriver) === null || _a === void 0 ? void 0 : _a.setEncryptionKey(key);\n        }\n    }\n}\n", "import { isPlatformServer } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, PLATFORM_ID, NgModule } from '@angular/core';\nimport { Storage } from '@ionic/storage';\nexport { Storage } from '@ionic/storage';\nconst StorageConfigToken = new InjectionToken('STORAGE_CONFIG_TOKEN');\nclass NoopStorage extends Storage {\n  constructor() {\n    super();\n  }\n  async create() {\n    return this;\n  }\n  async defineDriver() {}\n  get driver() {\n    return 'noop';\n  }\n  async get(key) {\n    return null;\n  }\n  async set(key, value) {}\n  async remove(key) {}\n  async clear() {}\n  async length() {\n    return 0;\n  }\n  async keys() {\n    return [];\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  async forEach(iteratorCallback) {}\n  setEncryptionKey(key) {}\n}\nfunction provideStorage(platformId, storageConfig) {\n  if (isPlatformServer(platformId)) {\n    // When running in a server context return the NoopStorage\n    return new NoopStorage();\n  }\n  return new Storage(storageConfig);\n}\nclass IonicStorageModule {\n  static forRoot(storageConfig = null) {\n    return {\n      ngModule: IonicStorageModule,\n      providers: [{\n        provide: StorageConfigToken,\n        useValue: storageConfig\n      }, {\n        provide: Storage,\n        useFactory: provideStorage,\n        deps: [PLATFORM_ID, StorageConfigToken]\n      }]\n    };\n  }\n}\nIonicStorageModule.ɵfac = function IonicStorageModule_Factory(t) {\n  return new (t || IonicStorageModule)();\n};\nIonicStorageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: IonicStorageModule\n});\nIonicStorageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IonicStorageModule, [{\n    type: NgModule\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IonicStorageModule, StorageConfigToken, provideStorage };\n"],
  "mappings": "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",
  "names": ["LocalForage"]
}
